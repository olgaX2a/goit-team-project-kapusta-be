{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.2",
    "title": "Project-kapusta API docs",
    "description": "API documentation for GoIT project 'Kapusta' ",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "http://goit-kapusta.herokuapp.com/api" }],
  "tags": [
    {
      "name": "Users",
      "description": "Users endpoints"
    },
    {
      "name": "Transactions",
      "description": "Transactions endpoints"
    },
    {
      "name": "Categories",
      "description": "Categories endpoints"
    }
  ],

  "paths": {
    "_REGISTRATION": "REGISTRATION USERS",
    "/users/registration": {
      "post": {
        "tags": ["Users"],
        "summary": "User registration",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "_VERIFY-TOKEN": "VERIFICATIONS",

    "/users/verify/{verifyToken}": {
      "get": {
        "tags": ["Users"],
        "summary": "Email verification",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Email verification token",
            "name": "verifyToken",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Invalid token",
            "content": {}
          }
        }
      }
    },

    "_LOGIN": "LOGIN USERS",
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "User login",
        "parameters": [],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid name/email/password supplied",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Current user. Substitute the token for verification",
        "parameters": [],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid token",
            "content": {}
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "_LOGOUT": "LOGOUT USERS",
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "User logout",
        "parameters": [],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success logout"
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "_BALANCE": "BALANCE USERS",
    "/users/balance": {
      "patch": {
        "tags": ["Users"],
        "summary": "User balance",
        "parameters": [],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Balance object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BalanceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/users/google": {
      "get": {
        "tags": ["Users"],
        "summary": "Google authentication. Request not happening due to CORS",
        "components": {
          "securitySchemes": {
            "oAuth2AuthCode": {
              "type": "oauth2",
              "description": "Google OAuth",
              "flows": {
                "implicit": {
                  "authorizationUrl": "https://accounts.google.com/o/oauth2/v2/auth",
                  "scopes": {
                    "security": {
                      "oAuth2AuthCode": ["write_pets"]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "403": {
            "description": "Not registered or registered with postman",
            "content": {}
          }
        }
      }
    },
    "_TRANSACTIONS": "TRANSACTIONS-GET",
    "/transactions/": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get all transactions for all time. Substitute the token for verification",
        "parameters": [],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid token",
            "content": {}
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/transactions/{transactionType}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get transactions expense or income. Substitute the token for verification",
        "operationId": "transactionType",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Choose income or expense",
            "name": "transactionType",
            "required": true,
            "type": "string",
            "enum": ["income", "expense"]
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "_schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid type specified"
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Type not found"
          }
        }
      },
      "post": {
        "tags": ["Transactions"],
        "summary": "Add transactions expense or income.Substitute the token for verification",
        "operationId": "Add transactions expense or income",
        "parameters": [],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Add transactions",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse",
                  "example": {
                    "amount": 50000.0,
                    "description": "Еда",
                    "category": "Здоровье",
                    "day": "12",
                    "month": "1",
                    "year": "2021",
                    "balance": 50000.0
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid type specified"
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Type not found"
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "_TRANSACTIONS-delete": "TRANSACTIONS-Delete",
    "/transactions/{transactionId}": {
      "delete": {
        "tags": ["Transactions"],
        "summary": "Delete transactions.Substitute the token for verification",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "Delete transactionId",
            "required": true,
            "type": "string"
          }
        ],
        "_requestBody": {
          "description": "Delete transactions",
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid type specified"
          },
          "404": {
            "description": "TransactionId not found"
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/categories/": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get all categories for all time. Substitute the token for verification. For more detailed information, specify the day, month, year in the request body",
        "parameters": [],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid token",
            "content": {}
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    }
  },

  "components": {
    "_SCHEMAS": "SCHEMAS",
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "password", "email"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Ekaterina"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "ekaterina1996@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "r9eLznY8Ft55YK83S7fm"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Ekaterina"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "ekaterina1996@gmail.com"
          },
          "userId": {
            "type": "integer",
            "description": "User's id",
            "example": "618d11adda0fb7ed76d6189"
          },
          "VerifyToken": {
            "type": "string",
            "description": "User's verification",
            "example": "-wkbqmLEz-shgOR3LDnqH"
          }
        },
        "example": [
          {
            "name": "Ekaterina",
            "email": "ekaterina1996@gmail.com",
            "verifyToken": "-wkbqmLEz-shgOR3LDnqH"
          }
        ]
      },

      "LoginRequest": {
        "type": "object",
        "required": ["name", "password", "email"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Ekaterina"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "ekaterina1996@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "r9eLznY8Ft55YK83S7fm"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Ekaterina"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "ekaterina1996@gmail.com"
          },
          "token": {
            "type": "integer",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MThkNmJjYjk0ZWRiZDU0YmIwZGU5NzciLCJpYXQiOjE2MzY2NTgxODF9.VkxeHg0rga-XnMZGhe7A6GiSWmMNBWi48bSMJ3Slr8Y"
          },
          "balance": {
            "type": "integer",
            "description": "User's balance",
            "example": 100.0
          }
        },
        "example": [
          {
            "name": "Ekaterina",
            "email": "ekaterina1996@gmail.com",
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MThkNmJjYjk0ZWRiZDU0YmIwZGU5NzciLCJpYXQiOjE2MzY2NTgxODF9.VkxeHg0rga-XnMZGhe7A6GiSWmMNBWi48bSMJ3Slr8Y",
            "balance": 0.0
          }
        ]
      },

      "CurrentResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Ekaterina"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "ekaterina1996@gmail.com"
          }
        },
        "example": [
          {
            "name": "Ekaterina",
            "email": "ekaterina1996@gmail.com"
          }
        ]
      },

      "LogoutRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MThkMjVjN2I1Yzk0YjMyZWMwMDYzNGMiLCJpYXQiOjE2MzY2NDIwNjB9.MDuFaOH7WEwUnTH13Xdi9zsB9d45SzYL9VeRa4Azt_I"
          }
        }
      },

      "BalanceRequest": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "integer",
            "description": "User's balance",
            "example": 50000
          }
        }
      },
      "BalanceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Update balance user's",
            "example": "Update balance user's"
          }
        }
      },
      "TransactionRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "User's amount",
            "example": 500
          },
          "description": {
            "type": "string",
            "description": "User's description",
            "example": "Еда"
          },
          "category": {
            "type": "string",
            "description": "User's categories",
            "example": "Здоровье"
          },
          "TransactionType": {
            "type": "boolean",
            "enum": ["income", "expense"]
          },
          "day": {
            "type": "string",
            "description": "day",
            "example": "8"
          },
          "month": {
            "type": "string",
            "description": "month",
            "example": "3"
          },
          "year": {
            "type": "string",
            "description": "year",
            "example": "2020"
          }
        },
        "example": {
          "amount": 50000.0,
          "description": "БАНЬКА",
          "category": "Здоровье",
          "transactionType": "income or expense",
          "day": "12",
          "month": "1",
          "year": "2021"
        }
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "User's amount",
            "example": 500
          },
          "description": {
            "type": "string",
            "description": "User's description",
            "example": "Еда"
          },
          "category": {
            "type": "string",
            "description": "User's categories",
            "example": "Здоровье"
          },
          "transactionType": {
            "type": "boolean",
            "enum": ["income", "expense"]
          },
          "day": {
            "type": "string",
            "description": "day",
            "example": "8"
          },
          "month": {
            "type": "string",
            "description": "month",
            "example": "3"
          },
          "year": {
            "type": "string",
            "description": "year",
            "example": "2020"
          }
        },
        "example": {
          "amount": 50000.0,
          "description": "БАНЬКА",
          "category": "Здоровье",
          "transactionType": "income or expense",
          "day": "12",
          "month": "1",
          "year": "2021"
        }
      },

      "CategoryRequest": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          }
        },
        "example": {
          "category": "Select category"
        }
      },
      "CategoryResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "User's amount",
            "example": 500
          },
          "description": {
            "type": "string",
            "description": "User's description",
            "example": "Еда"
          },
          "category": {
            "type": "string"
          },
          "transactionType": {
            "type": "string",
            "description": "User's type"
          },
          "day": {
            "type": "string",
            "description": "day",
            "required": true,
            "example": "8"
          },
          "month": {
            "type": "string",
            "description": "month",
            "required": true,
            "example": "3"
          },
          "year": {
            "type": "string",
            "description": "year",
            "example": "2020"
          }
        },
        "example": {
          "balance": 28930,
          "totalAmountTransactionsByReportMonth": {
            "totalIncome": 0,
            "totalExpense": 0
          },
          "allTransactionsByTypeForMonth": [],
          "allTransactionsByUser": [
            {
              "_id": "61911a4ccc907925fca347a4",
              "amount": 500,
              "description": "БАНЬКА",
              "category": "Здоровье",
              "transactionType": "income",
              "day": 12,
              "month": 1,
              "year": 2021
            }
          ]
        }
      }
    },
    "_SECURITY_SCHEMES": "ALL",
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "security": []
  }
}
